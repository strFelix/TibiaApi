// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TibiaApi.Data;

#nullable disable

namespace TibiaApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TibiaApi.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcessDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TB_ACCOUNTS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "beta.tester@gmail.com",
                            PasswordHash = new byte[] { 14, 96, 206, 248, 203, 31, 135, 32, 52, 237, 43, 178, 117, 248, 9, 46, 232, 11, 23, 226, 198, 137, 166, 137, 189, 161, 42, 212, 221, 28, 54, 120, 241, 172, 77, 52, 190, 185, 254, 182, 141, 205, 4, 8, 133, 252, 35, 223, 104, 238, 51, 253, 119, 150, 255, 89, 156, 157, 93, 134, 109, 27, 252, 150 },
                            PasswordSalt = new byte[] { 232, 78, 252, 109, 165, 176, 47, 117, 101, 61, 72, 215, 108, 190, 144, 227, 176, 236, 13, 195, 50, 117, 126, 65, 18, 225, 86, 163, 74, 99, 49, 229, 77, 78, 148, 42, 160, 79, 177, 68, 70, 91, 78, 82, 102, 107, 78, 199, 224, 174, 129, 190, 132, 199, 13, 47, 88, 208, 166, 125, 102, 115, 154, 195, 220, 136, 222, 182, 85, 92, 229, 17, 20, 172, 70, 101, 66, 182, 28, 194, 1, 238, 135, 34, 144, 55, 178, 39, 109, 2, 70, 94, 77, 83, 231, 64, 96, 94, 137, 138, 89, 78, 239, 240, 149, 26, 240, 156, 220, 248, 230, 28, 105, 109, 95, 11, 229, 145, 159, 199, 105, 57, 117, 114, 227, 10, 5, 201 },
                            PasswordString = "",
                            Username = "BetaTester"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
